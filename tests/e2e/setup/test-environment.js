/**
 * Configuration de l'environnement de test
 */

const TestHelpers = require('../../utils/test-helpers');
const testConfig = require('../../config/test-config');

class TestEnvironment {
  constructor() {
    this.helpers = new TestHelpers(testConfig);
    this.services = {
      web: null,
      worker: null,
      database: null,
      redis: null,
      ollama: null
    };
  }

  /**
   * Initialiser l'environnement de test complet
   */
  async initialize() {
    this.helpers.log('üöÄ Initialisation de l\'environnement de test...', 'INFO');

    try {
      // 1. V√©rifier les pr√©requis
      await this.checkPrerequisites();

      // 2. Initialiser les services
      await this.initializeServices();

      // 3. Configurer la base de donn√©es de test
      await this.setupTestDatabase();

      // 4. V√©rifier la connectivit√©
      await this.verifyConnectivity();

      // 5. Pr√©parer les donn√©es de test
      await this.prepareTestData();

      this.helpers.log('‚úÖ Environnement de test initialis√© avec succ√®s', 'INFO');
      return { success: true };

    } catch (error) {
      this.helpers.log(`‚ùå Erreur lors de l'initialisation: ${error.message}`, 'ERROR');
      await this.cleanup();
      throw error;
    }
  }

  /**
   * V√©rifier les pr√©requis
   */
  async checkPrerequisites() {
    this.helpers.log('üìã V√©rification des pr√©requis...', 'INFO');

    const checks = [
      { name: 'Node.js', check: () => process.version },
      { name: 'npm/pnpm', check: () => require('child_process').execSync('pnpm --version').toString().trim() },
      { name: 'Docker', check: () => require('child_process').execSync('docker --version').toString().trim() }
    ];

    for (const check of checks) {
      try {
        const result = check.check();
        this.helpers.log(`‚úÖ ${check.name}: ${result}`, 'INFO');
      } catch (error) {
        throw new Error(`Pr√©requis manquant: ${check.name}`);
      }
    }
  }

  /**
   * Initialiser les services
   */
  async initializeServices() {
    this.helpers.log('üîß Initialisation des services...', 'INFO');

    // D√©marrer PostgreSQL via Docker
    await this.startPostgreSQL();

    // D√©marrer Redis via Docker
    await this.startRedis();

    // V√©rifier Ollama
    await this.checkOllama();

    // D√©marrer les services applicatifs
    await this.startApplicationServices();
  }

  /**
   * D√©marrer PostgreSQL
   */
  async startPostgreSQL() {
    this.helpers.log('üêò D√©marrage de PostgreSQL...', 'INFO');

    try {
      // V√©rifier si PostgreSQL est d√©j√† en cours d'ex√©cution
      const connectivity = await this.helpers.testPostgresConnectivity();
      if (connectivity.success) {
        this.helpers.log('‚úÖ PostgreSQL d√©j√† en cours d\'ex√©cution', 'INFO');
        return;
      }

      // D√©marrer PostgreSQL via Docker
      const { execSync } = require('child_process');
      execSync(`docker run -d --name elavira-postgres-test \
        -e POSTGRES_DB=${testConfig.services.database.database} \
        -e POSTGRES_USER=${testConfig.services.database.username} \
        -e POSTGRES_PASSWORD=${testConfig.services.database.password} \
        -p ${testConfig.services.database.port}:5432 \
        postgres:15`, { stdio: 'inherit' });

      // Attendre que PostgreSQL soit pr√™t
      await this.helpers.retry(async () => {
        const result = await this.helpers.testPostgresConnectivity();
        if (!result.success) {
          throw new Error('PostgreSQL not ready');
        }
        return result;
      }, 10, 2000);

      this.helpers.log('‚úÖ PostgreSQL d√©marr√© avec succ√®s', 'INFO');

    } catch (error) {
      throw new Error(`Erreur lors du d√©marrage de PostgreSQL: ${error.message}`);
    }
  }

  /**
   * D√©marrer Redis
   */
  async startRedis() {
    this.helpers.log('üî¥ D√©marrage de Redis...', 'INFO');

    try {
      // V√©rifier si Redis est d√©j√† en cours d'ex√©cution
      const connectivity = await this.helpers.testRedisConnectivity();
      if (connectivity.success) {
        this.helpers.log('‚úÖ Redis d√©j√† en cours d\'ex√©cution', 'INFO');
        return;
      }

      // D√©marrer Redis via Docker
      const { execSync } = require('child_process');
      execSync(`docker run -d --name elavira-redis-test \
        -p ${testConfig.services.redis.port}:6379 \
        redis:7-alpine`, { stdio: 'inherit' });

      // Attendre que Redis soit pr√™t
      await this.helpers.retry(async () => {
        const result = await this.helpers.testRedisConnectivity();
        if (!result.success) {
          throw new Error('Redis not ready');
        }
        return result;
      }, 10, 1000);

      this.helpers.log('‚úÖ Redis d√©marr√© avec succ√®s', 'INFO');

    } catch (error) {
      throw new Error(`Erreur lors du d√©marrage de Redis: ${error.message}`);
    }
  }

  /**
   * V√©rifier Ollama
   */
  async checkOllama() {
    this.helpers.log('ü§ñ V√©rification d\'Ollama...', 'INFO');

    try {
      const connectivity = await this.helpers.testOllamaConnectivity();
      if (connectivity.success) {
        this.helpers.log(`‚úÖ Ollama connect√©, mod√®les disponibles: ${connectivity.models.length}`, 'INFO');
        
        // V√©rifier que le mod√®le requis est disponible
        const hasRequiredModel = connectivity.models.some(model => 
          model.name === testConfig.services.ollama.model
        );
        
        if (!hasRequiredModel) {
          this.helpers.log(`‚ö†Ô∏è Mod√®le ${testConfig.services.ollama.model} non trouv√©, utilisation du premier mod√®le disponible`, 'WARN');
        }
      } else {
        this.helpers.log('‚ö†Ô∏è Ollama non disponible, les tests utilisant l\'IA seront simul√©s', 'WARN');
      }
    } catch (error) {
      this.helpers.log(`‚ö†Ô∏è Erreur lors de la v√©rification d'Ollama: ${error.message}`, 'WARN');
    }
  }

  /**
   * D√©marrer les services applicatifs
   */
  async startApplicationServices() {
    this.helpers.log('üöÄ D√©marrage des services applicatifs...', 'INFO');

    try {
      // D√©marrer le worker
      await this.startWorker();

      // D√©marrer le web
      await this.startWeb();

      this.helpers.log('‚úÖ Services applicatifs d√©marr√©s', 'INFO');

    } catch (error) {
      throw new Error(`Erreur lors du d√©marrage des services: ${error.message}`);
    }
  }

  /**
   * D√©marrer le service worker
   */
  async startWorker() {
    this.helpers.log('‚öôÔ∏è D√©marrage du service worker...', 'INFO');

    try {
      const { spawn } = require('child_process');
      
      // D√©marrer le worker en arri√®re-plan
      this.services.worker = spawn('npx', ['tsx', 'apps/worker/src/index.ts'], {
        cwd: process.cwd(),
        stdio: 'pipe',
        env: {
          ...process.env,
          NODE_ENV: 'test',
          PORT: testConfig.services.worker.port,
          DATABASE_URL: `postgresql://${testConfig.services.database.username}:${testConfig.services.database.password}@${testConfig.services.database.host}:${testConfig.services.database.port}/${testConfig.services.database.database}`,
          REDIS_URL: `redis://${testConfig.services.redis.host}:${testConfig.services.redis.port}`,
          OLLAMA_BASE_URL: testConfig.services.ollama.baseUrl
        }
      });

      // Attendre que le worker soit pr√™t
      await this.helpers.retry(async () => {
        const result = await this.helpers.testHttpConnectivity(
          `${testConfig.services.worker.baseUrl}/health`
        );
        if (!result.success) {
          throw new Error('Worker not ready');
        }
        return result;
      }, 15, 2000);

      this.helpers.log('‚úÖ Service worker d√©marr√©', 'INFO');

    } catch (error) {
      throw new Error(`Erreur lors du d√©marrage du worker: ${error.message}`);
    }
  }

  /**
   * D√©marrer le service web
   */
  async startWeb() {
    this.helpers.log('üåê D√©marrage du service web...', 'INFO');

    try {
      const { spawn } = require('child_process');
      
      // D√©marrer le web en arri√®re-plan
      this.services.web = spawn('npx', ['next', 'dev', '-p', testConfig.services.web.port.toString()], {
        cwd: process.cwd(),
        stdio: 'pipe',
        env: {
          ...process.env,
          NODE_ENV: 'test',
          PORT: testConfig.services.web.port,
          NEXT_PUBLIC_API_URL: testConfig.services.worker.baseUrl
        }
      });

      // Attendre que le web soit pr√™t
      await this.helpers.retry(async () => {
        const result = await this.helpers.testHttpConnectivity(
          testConfig.services.web.baseUrl
        );
        if (!result.success) {
          throw new Error('Web not ready');
        }
        return result;
      }, 15, 2000);

      this.helpers.log('‚úÖ Service web d√©marr√©', 'INFO');

    } catch (error) {
      throw new Error(`Erreur lors du d√©marrage du web: ${error.message}`);
    }
  }

  /**
   * Configurer la base de donn√©es de test
   */
  async setupTestDatabase() {
    this.helpers.log('üóÑÔ∏è Configuration de la base de donn√©es de test...', 'INFO');

    try {
      // Ex√©cuter les migrations Prisma
      const { execSync } = require('child_process');
      execSync('pnpm prisma migrate deploy', {
        cwd: process.cwd(),
        stdio: 'inherit',
        env: {
          ...process.env,
          DATABASE_URL: `postgresql://${testConfig.services.database.username}:${testConfig.services.database.password}@${testConfig.services.database.host}:${testConfig.services.database.port}/${testConfig.services.database.database}`
        }
      });

      this.helpers.log('‚úÖ Base de donn√©es configur√©e', 'INFO');

    } catch (error) {
      throw new Error(`Erreur lors de la configuration de la base de donn√©es: ${error.message}`);
    }
  }

  /**
   * V√©rifier la connectivit√©
   */
  async verifyConnectivity() {
    this.helpers.log('üîç V√©rification de la connectivit√©...', 'INFO');

    const checks = [
      { name: 'PostgreSQL', check: () => this.helpers.testPostgresConnectivity() },
      { name: 'Redis', check: () => this.helpers.testRedisConnectivity() },
      { name: 'Worker API', check: () => this.helpers.testHttpConnectivity(`${testConfig.services.worker.baseUrl}/health`) },
      { name: 'Web UI', check: () => this.helpers.testHttpConnectivity(testConfig.services.web.baseUrl) }
    ];

    for (const check of checks) {
      const result = await check.check();
      if (result.success) {
        this.helpers.log(`‚úÖ ${check.name}: Connect√©`, 'INFO');
      } else {
        this.helpers.log(`‚ùå ${check.name}: ${result.error}`, 'ERROR');
        throw new Error(`√âchec de la connectivit√©: ${check.name}`);
      }
    }
  }

  /**
   * Pr√©parer les donn√©es de test
   */
  async prepareTestData() {
    this.helpers.log('üìä Pr√©paration des donn√©es de test...', 'INFO');

    try {
      // Cr√©er des agents de test
      const testAgents = this.helpers.generateTestData('agent', testConfig.testData.agents.count);
      
      // Cr√©er des documents de test
      const testDocuments = this.helpers.generateTestData('document', testConfig.testData.documents.count);

      // Sauvegarder les donn√©es de test
      this.testData = {
        agents: testAgents,
        documents: testDocuments
      };

      this.helpers.log(`‚úÖ Donn√©es de test pr√©par√©es: ${testConfig.testData.agents.count} agents, ${testConfig.testData.documents.count} documents`, 'INFO');

    } catch (error) {
      throw new Error(`Erreur lors de la pr√©paration des donn√©es: ${error.message}`);
    }
  }

  /**
   * Nettoyer l'environnement
   */
  async cleanup() {
    this.helpers.log('üßπ Nettoyage de l\'environnement...', 'INFO');

    try {
      // Arr√™ter les services applicatifs
      if (this.services.worker) {
        this.services.worker.kill('SIGTERM');
      }
      if (this.services.web) {
        this.services.web.kill('SIGTERM');
      }

      // Attendre que les services s'arr√™tent
      await this.helpers.wait(2000);

      // Arr√™ter les conteneurs Docker
      const { execSync } = require('child_process');
      try {
        execSync('docker stop elavira-postgres-test elavira-redis-test', { stdio: 'ignore' });
        execSync('docker rm elavira-postgres-test elavira-redis-test', { stdio: 'ignore' });
      } catch (error) {
        // Ignorer les erreurs si les conteneurs n'existent pas
      }

      // Nettoyer les donn√©es de test
      await this.helpers.cleanup();

      this.helpers.log('‚úÖ Environnement nettoy√©', 'INFO');

    } catch (error) {
      this.helpers.log(`‚ö†Ô∏è Erreur lors du nettoyage: ${error.message}`, 'WARN');
    }
  }

  /**
   * Obtenir les donn√©es de test
   */
  getTestData() {
    return this.testData;
  }

  /**
   * Obtenir la configuration
   */
  getConfig() {
    return testConfig;
  }
}

module.exports = TestEnvironment;
