/**
 * Script pour v√©rifier les IDs des agents
 */

const http = require('http');

console.log('üîç V√©rification des IDs des agents');
console.log('==================================');

// Configuration
const WORKER_URL = 'http://localhost:3001';

// Fonction pour faire une requ√™te HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port,
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    const req = http.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

// V√©rifier les agents
async function checkAgents() {
  console.log('\n1. V√©rification des agents...');
  try {
    const response = await makeRequest(`${WORKER_URL}/api/agents`);
    if (response.status === 200 && response.data.success) {
      console.log('‚úÖ Agents r√©cup√©r√©s avec succ√®s');
      console.log(`   Nombre d'agents: ${response.data.data.length}`);
      console.log('\n   D√©tails des agents:');
      response.data.data.forEach((agent, index) => {
        console.log(`   ${index + 1}. ${agent.name}`);
        console.log(`      ID: ${agent.id}`);
        console.log(`      R√¥le: ${agent.role}`);
        console.log(`      Mod√®le: ${agent.model}`);
        console.log('');
      });
      return response.data.data;
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des agents');
      console.log('   Status:', response.status);
      console.log('   Response:', response.data);
    }
  } catch (error) {
    console.log('‚ùå Erreur de connexion:', error.message);
  }
  return [];
}

// Fonction principale
async function runCheck() {
  console.log('üöÄ D√©marrage de la v√©rification...\n');
  
  const agents = await checkAgents();
  
  if (agents.length > 0) {
    console.log('\nüí° Utilisez l\'un de ces IDs pour tester:');
    agents.forEach(agent => {
      console.log(`   - ${agent.name}: ${agent.id}`);
    });
  }
  
  console.log('\n‚ú® V√©rification termin√©e !');
}

// Ex√©cuter la v√©rification
runCheck().catch(error => {
  console.error('‚ùå Erreur lors de la v√©rification:', error);
  process.exit(1);
});
